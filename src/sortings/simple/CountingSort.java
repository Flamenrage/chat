package sortings.simple;

import java.util.Arrays;

/**
 * Сортировка подсчётом
 *
 * Основывается на частоте элементов
 * Применяется, если известен диапазон сортируемых чисел от 0 до k
 * (если неизвестен, то ищем минимум и максимум).
 * Выделяем вспомогательный массив B размера k.
 * Проходим по всем элементам исходного массива А:
 * для каждого А[i]=число увеличиваем B[число] на 1.
 * Затем проходим по массиву B: для каждого B[i]=N записываем в выходной массив число i B[i] раз.
 *
 * Пример:
 * 3 1 1 1 2 3 3 2 3
 *
 * число             1 2 3
 * кол-во появлений  3 2 4
 *
 * 1 1 1  2 2  3 3 3 3
 *
 * Сложность:
 * время:  сред и худ. O(N + K), где N - размер массива, K - диапазон значений
 * память: O(N + K)
 *
 * ВНИМАНИЕ! Работает только на положительных числах!
 */

public class CountingSort {

    public static int[] sort(int[] a) {
        int maxRange = Arrays.stream(a).max().getAsInt() + 1;
        int[] count = new int[maxRange];
        // Подсчитываем частоту элементов
        for (int i = 0; i < a.length; i++) {
            count[a[i]]++;
        }
        int insertIndex = 0;
        for (int number = 0; number < count.length; number++) {
            // Вставляем в результат такой элемент необходимое число раз
            for (int i = 0; i < count[number]; i++) {
                a[insertIndex] = number;
                insertIndex++;
            }
        }
        return a;
    }
}
